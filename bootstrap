#!/usr/bin/env bash

export DEV_ENV=$HOME/Developer/Environment

clone_dev_environment() {
    echo "Cloning dev environment into $DEV_ENV"
    cd $DEV_ENV
    if [ $(git rev-parse --is-inside-work-tree) ]; then
        return
    fi
    git init
    git remote add origin git@github.com:namolnad/dev-environment.git
    git fetch origin
    git checkout -b master --track origin/master
    cd -
}

create_directories() {
    echo 'Create custom_credentials directory (if not exists)'
    mkdir -p $DEV_ENV/.custom_credentials
    mkdir -p $HOME/.rbenv
    mkdir -p $HOME/.ssh
    mkdir -p $HOME/.oh-my-zsh/custom/themes
    mkdir -p $HOME/.oh-my-zsh/custom/plugins
}

display_manual_tasks_remaining() {
    echo """
    Tasks remaining:
    1) Ensure Dropbox syncing is set up
    2) Point development application settings to \"$HOME/Dropbox/.dev_sync\"
    3) Grant full disk access to Alfred
    4) Install GPG Suite; set up GPG signing
    """
}

init_submodules() {
    echo 'Initializing all submodules'
    git submodule update --init --recursive
}

install_automator_tasks() {
    echo 'Installing automator tasks'
    # TODO: Install tasks from Dans-scripts
    # See https://apple.stackexchange.com/questions/343258/how-to-deploy-automator-workflow-to-clients for migration tactics
}

install_dependencies() {
    echo 'Installing gems'
    bundle install
    echo 'Running brew bundle'
    brew bundle
    echo 'Installing FZF'
    yes | $(brew --prefix)/opt/fzf/install
    echo 'Installing Oh My Zsh'
    sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
}

install_homebrew() {
    echo 'Checking if homebrew is installed'
    if ! [ -x "$(command -v brew)" ]; then
        echo 'Installing homebrew'
        PATH="/opt/homebrew/bin:$PATH"
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        if [ -f /opt/homebrew/bin/brew ]; then
            eval "$(/opt/homebrew/bin/brew shellenv)"
        fi
    fi
}

prompt_sudo() {
    sudo -v

    # Keep-alive: update existing `sudo` time stamp until `.osx` has finished
    while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &
}

setup_git() {
    ln -sf $DEV_ENV/.gitconfig $HOME/.gitconfig
}

setup_non_vim_editors() {
    echo 'Installing TabNine for VSCode'
    # TODO: Install TabNine (also for vscode)
}

setup_ruby_environment() {
    echo 'Installing rbenv'
    brew install rbenv
    ln -fs $DEV_ENV/.rbenv/version $HOME/.rbenv
    echo 'Installing global ruby'
    rbenv install -s $(cat ~/.rbenv/version)
    eval "$(rbenv init -)"
    echo 'Installing bundler'
    gem install bundler
    rbenv rehash
}

setup_ssh() {
    if [[ ! $(ls -A "$HOME/.ssh") ]]; then
        git_user=$(git config --get user.email)
        if [ -z "$git_user" ]; then read -r -p 'Enter your git email: ' git_user; fi
        ssh-keygen -t ed25519 -C "$git_user" -f "$HOME/.ssh/id_ed25519" -N ''
        eval "$(ssh-agent -s)"
        echo """Host *
  AddKeysToAgent yes
  IdentityFile ~/.ssh/id_ed25519""" > "$HOME/.ssh/config"
        pbcopy < "$HOME/.ssh/id_ed25519.pub"
        open -a Safari https://github.com/settings/keys
        echo 'Your ssh public key has been copied to the keyboard. Confirm when you have entered the key in GitHub (y)'
        while : ; do
            read -n 1 k <&1
            if [[ $k = y ]] ; then
                printf "\nContinuing setup\n"
                break
            else
                echo "Confirm when you have entered the key in GitHub"
            fi
        done
    fi
}

setup_system_settings() {
    $DEV_ENV/.macOS
}

setup_vim() {
    # TODO: Evaluate whether MacVim should be used along with iCompleteMe (and remove vim from Brewfile is so)
    # MacVim install
    # Move mvim script to /usr/local/bin
    # Symlink mvim script to vim
    #####
    # Install plugins
    vim -c 'PluginInstall' -c 'qa!'
}

symlink_customizations() {
    # Remove existing directory symlinks if exists
    rm -rf $HOME/.vim $HOME/Developer/Scripts

    # Setup symlinks
    ln -fs $DEV_ENV/.vim $HOME/.vim
    ln -fs $DEV_ENV/Scripts $HOME/Developer/Scripts
    ln -fs $DEV_ENV/.oh-my-zsh/custom/*.zsh $HOME/.oh-my-zsh/custom
    ln -fs $DEV_ENV/.oh-my-zsh/custom/themes/* $HOME/.oh-my-zsh/custom/themes
    ln -fs $DEV_ENV/.oh-my-zsh/custom/plugins/* $HOME/.oh-my-zsh/custom/plugins
    ln -fs $DEV_ENV/.bash_profile $HOME/.bash_profile
    ln -fs $DEV_ENV/.*rc $HOME
}

symlink_scripts() {
    script_home=$HOME/Developer/Scripts
    destination=/usr/local/opt

    sudo mkdir -p $destination

    sudo ln -sf $script_home/git-stashfiles $destination
    sudo ln -sf $script_home/git-rebase-origin $destination
    sudo ln -sf $script_home/git-worktree-branch $destination
}

echo 'Bootstrapping machine'

# NOTE: Order is important
prompt_sudo
create_directories
setup_git
setup_ssh
clone_dev_environment
symlink_customizations
install_homebrew
setup_ruby_environment
install_dependencies
symlink_scripts
setup_system_settings
init_submodules
install_automator_tasks
setup_non_vim_editors
display_manual_tasks_remaining
